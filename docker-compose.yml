services:
  # Listings Service
  listingsservice.api:
    build:
      context: ./src/ListingService/API/ListingsService.API
      dockerfile: Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=listingsdb;Port=5432;Database=${POSTGRES_DB_LISTINGS};Username=${POSTGRES_USER_LISTINGS};Password=${POSTGRES_PASSWORD_LISTINGS}
      - Jwt__PublicKeyPath=/app/keys/public.key 
    depends_on:
      - listingsdb

  listingsdb:
    image: postgres:14-alpine
    container_name: listingsdb
    environment:
      - POSTGRES_USER=${POSTGRES_USER_LISTINGS}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_LISTINGS}
      - POSTGRES_DB=${POSTGRES_DB_LISTINGS}
    ports:
      - "5432:5432" 
    volumes:
      - listings-data:/var/lib/postgresql/data
 

  # Users Service
  studentswapapp.api:
    build:
      context: ./src/UserService/API/StudentSwapApp
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=usersdb;Port=5432;Database=${POSTGRES_DB_USERS};Username=${POSTGRES_USER_USERS};Password=${POSTGRES_PASSWORD_USERS}
      - Jwt__PrivateKeyPath=/app/keys/private.key
      - Jwt__PublicKeyPath=/app/keys/public.key
    depends_on:
      - usersdb

  usersdb:
    image: postgres:14-alpine
    container_name: usersdb
    environment:
      - POSTGRES_USER=${POSTGRES_USER_USERS}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_USERS}
      - POSTGRES_DB=${POSTGRES_DB_USERS}
    ports:
      - "5433:5432"  
    volumes:
      - users-data:/var/lib/postgresql/data
 # Purchase Service
  purchaseservice.api:
    build:
      context: ./src/PurchaseService/API/PurchaseService.API
      dockerfile: Dockerfile
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=purchasedb;Port=5432;Database=${POSTGRES_DB_PURCHASE};Username=${POSTGRES_USER_PURCHASE};Password=${POSTGRES_PASSWORD_PURCHASE}
      - Jwt__PublicKeyPath=/app/keys/public.key
    depends_on:
      - purchasedb

  purchasedb:
    image: postgres:14-alpine
    container_name: purchasedb
    environment:
      - POSTGRES_USER=${POSTGRES_USER_PURCHASE}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PURCHASE}
      - POSTGRES_DB=${POSTGRES_DB_PURCHASE}
    ports:
      - "5434:5432" 
    volumes:
     - purchase-data:/var/lib/postgrsql/data
  paymentservice.api:
    build:
      context: ./src/PaymentService/API/PaymentService.API
      dockerfile: Dockerfile
    ports:
      - "5005:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Jwt__PublicKeyPath=/app/keys/public.key 
    #Notification Service
  notificationservice:
     build:
         context: ./src/NotificationService/API/NotificationsService
         dockerfile: Dockerfile
     ports:
       - "5006:8080"
     depends_on:
       - kafka
     environment:
      - ASPNETCORE_ENVIRONMENT=Development

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

  
volumes:
  listings-data:
  users-data:
  purchase-data:
  cart-data:  
  
